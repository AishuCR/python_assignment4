{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# base class is Employee\n",
    "#     Attributes:\n",
    "# Employee_name(string), Employee_address(string), Vehicle_data(this is vehicle object)\n",
    "# child class is FullTimeEmployee, HourlyEmployee, Consultant\n",
    "# Create a base class Employee that has the following attributes:\n",
    "# o Employee’s name (string)\n",
    "# o Employee’s address (string)\n",
    "# o Vehicle data (Vehicle object).\n",
    "# • The child classes FullTimeEmployee, HourlyEmployee and Consultant that inherit from\n",
    "# Employee have the following additional properties\n",
    "# o FullTimeEmployee – salary (float).\n",
    "# o HourlyEmployee - hoursWorked (int) and hourlyRate (float).\n",
    "# o Consultant – hoursWorked (int) and ProjectType (valid values are 1, 2, and 3).\n",
    "# • All these classes have the __init__ method as well as the get and set methods. In addition,\n",
    "# they have a get_compensation() method as described below.\n",
    "# • Compensation for each employee type is to be computed as follows:\n",
    "# o FullTimeEmployee: Compensation is salary minus taxes and taxes are calculated based\n",
    "# on the tax rate in the table below. Please notice that this format calculates the annual\n",
    "# compensation and what this function needs to return is the weekly compensation\n",
    "# (assuming there are 52 weeks per year).\n",
    "\n",
    "class Employee():\n",
    "    def __init__(self, name_of_employee, address_of_employee, vehicle):\n",
    "        self.__name = name_of_employee\n",
    "        self.__address = address_of_employee\n",
    "    \n",
    "    def get_name(self):\n",
    "        return self.__name\n",
    "    \n",
    "    def set_name(self, name_of_employee):\n",
    "        self.__name = name_of_employee\n",
    "        \n",
    "    def __str__(self):\n",
    "        return (\"The Employees name is  {0}\".format(self.__name))\n",
    "        \n",
    "    def get_address(self):\n",
    "        return self.__address\n",
    "    \n",
    "    def set_address(self, address_of_employee):\n",
    "        self.__address = address_of_employee\n",
    "        \n",
    "    def __str__(self):\n",
    "        return (\"The Employee's address is  {1}\".format(self.__address))\n",
    "    \n",
    "    def get_compensation():\n",
    "        compensation = salary - tax\n",
    "        weekly_compensation = compensation/52\n",
    "        if(salary =< 45000):\n",
    "            tax = 0.18 * salary\n",
    "            elif(salary > 45000 and < 82000):\n",
    "                tax = \n",
    "        \n",
    "         vehicle = Employee()\n",
    "            \n",
    "class FullTimeEmployee(Employee):\n",
    "    def __init__(self, name_of_employee, address_of_employee, employee_salary ):\n",
    "        super().__init__(name_of_employee, address_of_employee )\n",
    "        self.__salary = employee_salary\n",
    "        \n",
    "    def get_salary(self):\n",
    "        return self.__salary\n",
    "            \n",
    "    def set_salary(self, employee_salary):\n",
    "        self.__salary = employee_salary\n",
    "        \n",
    "    def __float__(self):\n",
    "        return(\"The Full Time Employee salary is {}\".format(self.__salary) )\n",
    "        \n",
    "        \n",
    "        \n",
    "class HourlyEmployee(Employee):\n",
    "    def __init__(self, name_of_employee, address_of_employee, hours_worked, hourly_rate ):\n",
    "        super().__init__(name_of_employee, address_of_employee )\n",
    "        self.__hoursWorked = hours_worked\n",
    "        self.hourlyRate = hourly_rate\n",
    "        \n",
    "    def get_hoursWorked(self):\n",
    "        return self.__hoursWorked\n",
    "        \n",
    "    def set_hoursWorked(self, hours_worked)\n",
    "        self.__hoursWorked = hours_worked\n",
    "        \n",
    "    def __int__(self):\n",
    "        return(\"The Hourly Employee worked for {} hours\".format(self.__hoursWorked) )\n",
    "        \n",
    "    def get_hourlyRate(self):\n",
    "        return self.__hourlyRate\n",
    "        \n",
    "    def set_hourlyRate(self, hourly_rate)\n",
    "        self.__hourlyRate = hourly_rate\n",
    "        \n",
    "    def __float__(self):\n",
    "        return(\"The hourly rate for the hourly employee is {}\".format(self.__hourlyRate) )\n",
    "        \n",
    "class Consultant(Employee):\n",
    "    def __init__(self, name_of_employee, address_of_employee, consultant_hours_worked, project_type ):\n",
    "        super().__init__(name_of_employee, address_of_employee )\n",
    "        self.__hoursWorked = consultant_hours_worked\n",
    "        self.__projectType = project_type\n",
    "        \n",
    "    def get_hoursWorked(self):\n",
    "        return self.__hoursWorked\n",
    "        \n",
    "    def set_hoursWorked(self, consultant_hours_worked)\n",
    "        self.__hoursWorked = consultant_hours_worked\n",
    "        \n",
    "    def __int__(self):\n",
    "        return(\"The consultant worked for {} hours\".format(self.__hoursWorked) )\n",
    "        \n",
    "    def get_hourlyRate(self):\n",
    "        return self.__projectType\n",
    "        \n",
    "    def set_hourlyRate(self, project_type)\n",
    "        self.__projectType = project_type\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
